[
    
    {
        "id": 76,
        "simple_instruction": "Write a code to read h5 data named '76_h5_data.h5' and visualize the \"women's millions of dollars\" dataset with a composite graph: an axis-free box plot above and a histogram below. Label key statistics on the box plot and detail the frequency distribution in the histogram. Highlight quartiles with continuous red dashed lines across both sections, ensuring no breaks.",
        "expert_instruction": "I Have some data of Clothing Stores Retail Sales in U.S.A named in h5 format named '76_h5_data.h5'. There are two datasets in the .h5 file. The first dataset is \"Woman's Millions of dollars\". the second dataset is \"Men's millions of Dollars\". Write a python script to read data from file \"76_h5_data.h5\" and create a vertical two-part graph with the top part being a box plot and the bottom part a histogram. The data visualized relates to 'Women's millions of dollars' in retail sales. The plot showcase the distribution of women's clothing retail sales in the U.S. The upper section is an axis-free box plot highlighting key statistical values, while the lower section is a histogram detailing the frequency distribution. Red dashed lines indicate the quartiles, seamlessly connecting both plots to emphasize these measures.The box plot should have no visible axes, and it should be narrower in width. Include numerical labels for key statistics such as the minimum, lower quartile, median, upper quartile, and maximum values, placed just above the box plot. The histogram should have visible axes and a smaller bin size for finer details. Add two continuous red dashed lines at the lower and upper quartiles. These lines should extend seamlessly across both the box plot and the histogram, without any gaps. The entire plot should be tightly laid out with no space between the box plot and the histogram so that the line can have no break."
    },
    {
        "id": 77,
        "simple_instruction": "I have data of protein consumption in 24 European countries named \"77_h5_data.h5\". The datasets are [\"Country\",\"Red Meat\",\"White Meat\",\"eggs\",\"milk\",\"Fish\",\"Cereals\",\"Starch\",\"Nut\",\"Fruits & Vegetables\"].\nWrite a Python code to visualize this data using a 2D scatter plot with K-Means clustering into three distinct color-coded clusters. The plot should include semi-transparent ellipses around each cluster, lines connecting data points to cluster centroids, and annotations for each point representing countries. It should be well-labeled and include a legend, aiming for clarity and visual grouping.",
        "expert_instruction": "I have data of protein consumption in 24 European countries named \"77_h5_data.h5\". The datasets are [\"Country\",\"Red Meat\",\"White Meat\",\"Eggs\",\"Milk\",\"fish\",\"Cereals\",\"Starch\",\"Nuts\",\"Fruits and Vegetables\"].\nWrite a python code to create an image of a 2D scatter plot representing a K-Means clustering of data. The plot should have three distinct clusters of points, each in its own color. For example, Cluster 0 could be blue, Cluster 1 could be red, and Cluster 2 could be green. Around each cluster, draw a semi-transparent ellipse in the same color as the cluster points but in a lighter shade, giving a sense of grouping. Connect each data point to the centroid of its cluster with a thick grey line. The background should have a grid, enhancing the plot's readability. Label the x-axis as 'Principal Component 1' and the y-axis as 'Principal Component 2'. Annotate each data point with a small text label close to it, which could be the names of countries for a realistic touch, but ensure the text is legible. The plot should have a title at the top: 'K-Means Clustering with PCA-reduced Data and Colored Ellipses'. Include a legend on the side, denoting the clusters with their respective colors."
    },
    {
        "id": 78,
        "simple_instruction": "Create a Python script to generate a 3D scatter plot from a h5 file named \"78_h5_data.h5\" with datasets [\"0-60 mph(sec)\", \"Gas Mileage(mpg)\", \"Power(kw)\", \"Weight(kg)\", \"Engine Displacement(CC)\"]. The plot should meet the following specifications:\n- Plot each car as a point in 3D space using its acceleration time, gas mileage, and power as coordinates.\n- Point sizes should increase with the engine displacement, and colors should vary from one end of the spectrum (like purple) for smaller engines to the other end (like yellow) for larger engines.\n- Add flat projections of these points onto the XY, ZX, and YZ planes below and to the sides of the 3D points, colored blue, red, and green, respectively.\n- Include a color bar to indicate the relationship between color and engine displacement.\n- Label each axis to show what it represents and use a 3D perspective for viewing the plot.\n- Ensure the plot has a modern and clean design, with clear, semi-transparent points to avoid visual clutter.",
        "expert_instruction": "I have data of car named \"78_h5_data.h5\". The available datasets list is [\"0-60 mph(sec)\",\"Gas Mileage(mpg)\",\"Power(kW)\",\"Weight(kg)\",\"EngineDisplacement(cc)\"].\nWrite a python code to draw a plot.\n1. **Type of Plot**: This is a 3D scatter plot.\n\n2. **Axes Description**:\n   - The X-axis represents \"0-60 mph (sec)\".\n   - The Y-axis represents \"Gas Mileage (mpg)\".\n   - The Z-axis represents \"Power (kW)\".\n\n3. **Data Points**:\n   - Each data point in the 3D space represents a car, plotted according to its 0-60 mph time, gas mileage, and power.\n   - The size of each point correlates positively with the engine displacement (cc) of the car. Larger points signify larger engine displacements.\n   - The color of the points also represents engine displacement, using a gradient color scheme (like viridis), where one color end (like purple) indicates smaller displacement, and the other end (like yellow) indicates larger displacement.\n\n4. **Projections**:\n   - There are projections of these data points on three planes: XY, ZX, and YZ.\n   - Each projection uses dots of a single color for all points on that plane.\n   - The XY plane projection is at the bottom (below the main data points), colored blue.\n   - The ZX plane projection is on one side, colored red.\n   - The YZ plane projection is on another side, colored green.\n\n5. **Additional Elements**:\n   - A color bar is present, showing the correlation between color and engine displacement in cc.\n   - The plot has labels for each axis, clearly stating what each axis represents.\n   - The plot uses a 3D perspective, allowing the axes and projections to be viewed at an angle rather than straight on.\n\n6. **Style**:\n   - The plot should have a modern, clean look, with a focus on readability and clarity.\n   - The scatter points are solid and well-defined, with a slightly transparent look to prevent overcrowding visually."
    },
    {
        "id": 79,
        "simple_instruction": "I have data of iris flower named \"79_h5_data.h5\". Generate a 3D scatter plot from \"79_h5_data.h5\" using the datasets \"Petal Length(cm)\", \"Petal width(cm)\", \"Sepal Length(cm)\", and \"Species\". Use distinct colors to represent each iris flower species. For each species, include confidence ellipses that encompass 95% of the data points, ensuring these ellipses are aligned with the principal axes of variation in the dataset. The confidence ellipses should be solid, opaque, and color-matched to the scatter points of each species, without any wireframes. Ensure the plot includes labeled axes for 'Petal Length', 'Petal Width', and 'Sepal Length', and add a legend that clearly identifies each species by its corresponding color.",
        "expert_instruction": "I have data of iris flower named \"79_h5_data.h5\". The list of datasets is [\"Petal Length(cm)\",\"petal width(cm)\",\"Sepal length(cm)\",\"Sepal Width(m)\",\"Species\"].\nWrite a python code to draw a plot.\n1. Create a 3D scatter plot with axes representing 'Petal Length', 'Petal-Width', and 'Sepal Length'.\n2. Plot data points for each iris flower species using distinct colors.\n3. For each species, calculate the mean of the data points to determine the ellipsoid center.\n4. Compute the covariance matrix for each species to define the ellipsoid shape and orientation.\n5. Scale the ellipsoids to include 95% of the respective data points, ensuring they are aligned with the dataset's principal variation axes.\n6. Draw solid, opaque ellipsoids for each species in matching colors to the scatter points, without wireframes.\n7. Add axis labels for each measurement dimension and a legend that identifies each species by color."
    },
    {
        "id": 83,
        "simple_instruction": "I want to create a line chart of the Dow Jones Industrial Average from October 2006 to August 2013 using Python. The data is in '83_h5_data.h5' with dataset \"Date\", \"Dow Jones Industrial Average\" and \"1 Year moving average\". Write a Python code to read the data and draw two lines on the chart. You should also color the area between the lines based on certain rules. Then add a title, labels, and a legend, and make sure the dates are readable.",
        "expert_instruction": "I want to plot a line graph of the Dow Jones Industrial Average (DJIA) from October 2006 to August 2013.\nThe data is in '83_h5_data.h5'\nThe data contains three datasets:\nDate: The date of the record.\nDow Jones Industrial Average: The daily closing value of the DJIA.\n1 year Moving Average: The 1-year moving average value of the DJIA.\nWith this data, you can plot the line graph using Python. Here's how you can do it:\n\n- Read the data from the h5 file using h5py.\n- Convert the date datasets values to datetime for proper plotting.\n- Plot the daily DJIA values and the 1-year moving average as lines on the graph.\n- Fill the area between the lines with the appropriate colors using the fill_between method.\n- Set the title of the graph and labels for the X and Y axes.\n- Adjust the X-axis to display the dates in a readable format.\n- Add a legend to the graph."
    },
    {
        "id": 84,
        "simple_instruction": "I want to create a phase diagram of water using Python. The data is in a file called '84_h5_data.h5'.\n\n- First, you should set up the chart with a horizontal axis for temperature and a vertical axis for pressure. These should be marked in Celsius, Kelvin, Pascals, bars and millibars, with conversions where necessary.\n- Next, you should use the data to draw the lines that separate the solid, liquid, and gas phases of water. Use datasets Pressure(gas) and Pressure(liquid) of data to draw the line that separates the solid, liquid, and gas phases. Use datasets  temperature(K) and temperature(K).1 to draw the line that separates the solid and liquid phases.\n- You should also mark two special points: the triple point at 273.16 K and 611.657 Pa, where solid, liquid, and gas coexist, and the critical point at 647.396 K and 22.064 MPa, where there's no difference between liquid and gas.\n- You should draw two vertical red lines to show the freezing and boiling points of water at normal pressure.\n- Make sure to label everything clearly, and color the different regions to show the solid, liquid, and gas phases.\n- Finally, you should add a grid to make the chart easier to read, and ensure the pressure scale is logarithmic, since phase diagrams often cover a wide range of pressures.",
        "expert_instruction": "Write a python script to draw the phase diagram of water with the provided data, named \"84_h5_data.h5\":\n1. Prepare the Axes:\n- Create a horizontal axis for temperature, marking one scale in Celsius (0\u00b0C to 100\u00b0C) and another in Kelvin (273.15 K to 647.396 K). These scales should be aligned so that each temperature in Celsius matches its corresponding value in Kelvin.\n- Create a vertical axis for pressure, marking one scale in Pascals (from 611.657 Pa to 22.064 MPa, possibly using a logarithmic scale for better visualization) and another in bars and millibars. Align these scales so that, for example, 100 kPa corresponds with 1 bar.\n- Set X1 to x1 - 273.15 to convert Kelvin to Celsius for the top X-axis. Set Y1 to y1/100000 to convert Pascals to bars for the right Y-axis. Adjust the right Y-axis to have a Log10 scale type.\n2. Plot the Phase Boundaries:\n- Utilize datasets pressure(Gas) and pressure(Liquid) from your data to plot the boundary line between the solid, liquid, and gas phases, curving from the triple point to the critical point.\n- Use datasets \"Temperature(K)\" and \"Temperature(K).1\" to plot the boundary between solid and liquid phases, which typically curves less dramatically than the solid-liquid-gas line.\n3. Highlight Special Points:\n- Mark the triple point at 273.16 K and 611.657 Pa, where solid, liquid, and gas coexist.\n- Indicate the critical point at 647.396 K and 22.064 MPa, where the distinction between liquid and gas phases ends.\n4. Insert Red Lines:\n- Draw a vertical red line at 0\u00b0C and 273.15 K to represent the freezing point at 1 atm, intersecting the solid-liquid boundary.\n- Add another vertical red line at 100\u00b0C and 373.15 K for the boiling point at 1 atm, intersecting the liquid-gas boundary.\n5. Label and Color-Code:\n- Clearly label each axis with its respective units.\n- Color the different regions of the diagram to represent the solid (blue), liquid (green), and gas (yellow) phases.\n- Annotate the diagram with the special points and the red lines, including their corresponding temperature and pressure values.\n6. Grid and Scale:\n- It may be helpful to include a grid to accurately read off pressures and temperatures at various points on the diagram.\n- Ensure that the scale is logarithmic for pressure if you are spanning wide ranges, as phase diagrams often do."
    },
    {
        "id": 87,
        "simple_instruction": "Utilize the following datasets from '87_h5_data.h5' to create a sunburst plot:\n- 'country': for the names of the countries,\n- 'continent': to indicate which continent each country is in,\n- 'lifeExp': showing the expected lifespan in each country,\n- 'pop': representing the population of each country.\nYour chart should:\n- Organize the data hierarchically, starting with continents and then breaking down into countries.\n- Use the population of each country to determine the size of its segment in the chart.\n- Color code each segment by the country's expected lifespan, transitioning from red to blue across the range of values.\n- Set the central value of the color scale to the average lifespan, weighted by the population of the countries.\n- Finally, include a legend to help interpret the lifespan values as indicated by the color coding.",
        "expert_instruction": "Use 87_h5_data.h5 to plot a sunburst chart.\n- The hierarchy is defined by the 'continent' and 'country' datasets.\n- The size of each segment is determined by the 'pop' dataset (population).\n- The color of each segment is determined by the 'lifeExp' datasets (life expectancy).\n- The color scale is a diverging scale that goes from red to blue ('RdBu').\n- The midpoint of the color scale is the weighted average of the 'lifeExp' values, with the weights being the 'pop' values.\n- Add A color bar as a legend for the 'lifeExp' dataset."
    },
    {
        "id": 95,
        "simple_instruction": "Create a polar coordinate diagram using data from \"95_h5_data.h5\" to display the highest temperatures on the first of each month in Amherst, spanning from January 1, 2004, to August 1, 2015. The data includes datasets labeled \"Year,\" \"Date,\" and \"Temperature.\" The diagram should include:\n\n- 12 sectors, each representing a month of the year.\n- Temperature data plotted according to the corresponding month.\n- Circular points for the temperature data, slightly offset to prevent alignment along a single radial line.\n- Abbreviated labels for the months (Jan, Feb, Mar, etc.).\n- A blue curve that connects the data points from the year 2015.\n- A legend positioned on the right side of the diagram.\n- A title: \"Monthly Highest Temperature in Amherst (2004-2015).\"\nThe purpose of the diagram is to clearly illustrate the temperature trends and monthly variations over the years, with an emphasis on the data from 2015.",
        "expert_instruction": "I want a polar coordinate diagram to visualize the highest temperature data in Amherst on the first of each month, spanning from January 1, 2004, to August 1, 2015. The data is named \"95_h5_data.h5\". The data contains three datasets: \"Year,\" \"Date,\" and \"Temperature.\" Here are My specific requirements for the visualization:\n- The diagram should be divided into 12 sectors, corresponding to the months of the year.\n- Temperature data should be plotted on the diagram according to the month.\n- The points representing the temperature data should be circular.\n- These points should be slightly offset so as not to align on a single radial line, with each point for the 1st of a month positioned between that month and the next. The offset should range from 0 to \u03c0/6 radians.\n- Month labels should be abbreviated (Jan, Feb, Mar, etc.) instead of numerical (1, 2, 3, etc.).\n- A blue curve should connect the data points for the year 2015 to distinguish it from other years.\n- The legend should be moved to the right to avoid overlapping the diagram.\nThe diagram will serve as a clear visual representation of temperature trends and variations by month over several years, with particular emphasis on the data from 2015."
    },
    {
        "id": 96,
        "simple_instruction": "Create a combination chart from the \"96_h5_data.h5\" dataset, which contains sales data for various mobile phone brands across different quarters of the year. The datasets in the h5 file are [\"Quarter\", \"Samsung\", \"Nokia/Microsoft\", \"Apple\", \"LG\", \"ZTE\", \"Huawei\"]. For each brand, create a box plot to represent the distribution of their sales data. On each box plot, display all the individual sales data points for that brand. Additionally, calculate the average sales for each brand and draw a line connecting these average values across the box plots. Use a consistent color scheme for the same quarter across different years, varying the shades to distinguish between years. Include a legend to aid in understanding the color coding.",
        "expert_instruction": "Write a Python code to create a combination chart from a dataset named \"96_h5_data.h5\". The dataset contains sales data for various mobile phone brands (\"Samsung,\" \"Nokia/Microsoft,\" \"Apple,\" \"LG,\" \"ZTE,\" and \"Huawei\") across different quarters of the year titled \"Quarter\" (e.g., \"Q1 '10\" for the first quarter of 2010). The dataset of the h5 file is [\"Quarter\", \"Samsung\", \"Nokia/Microsoft\", \"Apple\", \"LG\", \"ZTE\", \"Huawei\"]. The chart should include a box plot for each brand showing the distribution of sales data across quarters, with individual sales data points represented as dots. Also, calculate the overall mean sales for each brand and draw a line connecting these points. Ensure the line points align with their respective box plots. Use a consistent color scheme for the same quarter across different years, varying the shades to distinguish between years. Include a legend to aid in understanding the color coding. The box plot should be the underlying layer, and the data points should be on top, ensuring visibility."
    },
    {
        "id": 97,
        "simple_instruction": "Create two ternary phase diagrams from the dataset \"97_h5_data.h5\", containing 'No.', 'IL (25\u00b0C)', 'toluene (25\u00b0C)', and 'n-heptane (25\u00b0C)'. Each same index data from each datasets indicates a mixture composition of these components at 25\u00b0C, with 'No.' indicating different groups or conditions.\n\nFor both diagrams:\n- Title: \"Liquid-Liquid Phase Diagram\".\n\n1. Equilateral Triangle Diagram:\n  - Plot with 'toluene' at the top, 'n-heptane' at the bottom left, and 'IL' at the bottom right.\n  - Transform component fractions to Cartesian coordinates for an equilateral layout.\n  - Plot data points as circles, connect same 'No.' group points with dashed lines, and use different colors for each group.\n  - Label each vertex with the component name and draw borders for the triangle and remove axis ticks and labels for a clean look.\n2. Right-Angled Triangle Diagram:\n  - Plot with 'IL' on the vertical axis, 'toluene' on the horizontal axis, right angle at the bottom left.\n  - Transform for a right-angled layout, similarly plot and connect points, using the same color scheme.\n  - Label axes with 'IL' and 'toluene', and draw borders for the triangle and remove axis ticks and labels for a clean look.\nDisplay both diagrams side-by-side, maintaining an equal aspect ratio for comparison.",
        "expert_instruction": "Create two ternary phase diagrams using the provided dataset named \"97_h5_data.h5\". The dataset contains datasets 'No.', 'IL (25\u00b0C)', 'toluene (25\u00b0C)', and 'n-heptane (25\u00b0C)', where each row represents a unique mixture composition of these three components at 25\u00b0C. The 'No.' dataset categorizes the data into different groups or experimental conditions.\n\nFor both diagrams:\n- Title: \"Liquid-Liquid Phase Diagram\".\n\nEquilateral Triangle Diagram:\n\n- Plot an equilateral triangle ternary diagram.\n- Position 'toluene' at the top vertex, 'n-heptane' at the bottom left vertex, and 'IL' at the bottom right vertex.\n- Convert the component fractions to Cartesian coordinates suitable for an equilateral triangle layout.\n- Plot each data point as a circle and connect points within the same 'No.' group with dashed lines.\n- Use different colors for each 'No.' group and add a legend to distinguish these groups.\n- Label each vertex of the triangle with the corresponding component name.\n- Draw borders for the triangle and remove axis ticks and labels for a clean look.\n\nRight-Angled Triangle Diagram:\n\n- Plot a right-angled triangle ternary diagram.\n- Position 'IL' on the vertical axis, 'toluene' on the horizontal axis, and have the right angle at the bottom left corner.\n- Convert the component fractions to Cartesian coordinates suitable for a right-angled triangle layout.\n- Plot each data point as a circle and connect points within the same 'No.' group with dashed lines.\n- Use the same color scheme as the equilateral diagram for consistency, and include a legend.\n- Label the vertical and horizontal axes with 'IL' and 'toluene' respectively.\n- Draw borders for the triangle and remove axis ticks and labels for a clean look.\nEnsure both diagrams are plotted side-by-side for easy comparison, and maintain an equal aspect ratio for both diagrams."
    },
    {
        "id": 99,
        "simple_instruction": "Create a dark-themed violin plot to compare the total bill amounts by day of the week from a h5 file named \"99_h5_data.h5\" which includes datasets \"total_bill\", \"tip\", \"Sex\", \"Smoker\", \"day\", \"time\", and \"size\". The plot should clearly distinguish between smokers and non-smokers using a green color for smokers and grey for non-smokers. Include split violins to show this distinction, and make sure the plot represents data quartiles inside each violin.",
        "expert_instruction": "To create a violin plot using Seaborn, you should use data from a h5 file named \"99_h5_data.h5\" which includes datasets \"total_bill\", \"tip\", \"sex\", \"smoker\", \"Day\", \"Time\", and \"size\". The plot should focus on comparing the 'Total_Bill' amounts for different 'Day' values (days of the week), with a distinction between 'smoker' and 'non-smoker' categories. Implement split violins for this purpose, and within each violin, use quartiles to represent the data distribution. The color scheme should be green for smokers and grey for non-smokers. Adopt a dark style theme for the plot."
    },
    {
        "id": 100,
        "simple_instruction": "Use a h5 file named \"100_h5_data.h5\" to create a polar plot visualizing electron transitions in an atom, with the plot representing only the top half of a circle (semi-circle). The file has datasets 'series', 'wavelength', 'L position', and 'p position'. The plot should represent only the top half of a circle (semi-circle) and include the following elements:\n1. The semi-circle's radius should be divided into 6 concentric regions representing energy levels 1 to 6, with clear black lines separating them. Label the left side of the semi-circle with '1n' to '6n' indicators for each energy level, and the right side with corresponding energy values '0 eV' to '13.22 eV'.\n2. Electron transitions, indicated by arrows within the semi-circle, should originate from the 'l position' (lower energy level) and point to the 'p position' (higher energy level). Arrows should be evenly spaced to avoid overlap, and each should be annotated with its transition wavelength at the head, just outside the semi-circle.\n3. Color-code the transitions based on their series, like 'Lyman Series', 'Balmer Series', 'Paschen Series', etc., and use a lighter shade of the same color to highlight the angular range of each series.\n4. Ensure the plot is clear and legible, with no overlapping text or arrows. Exclude radial gridlines, radial ticks, or angle labels.\n5. Title the plot \"Electron Transitions for an Atom\".\nThe data should be sorted by the 'Series' dataset, and all labels and annotations should be easily readable. The plot should effectively represent the data in a visually appealing and scientifically accurate manner.",
        "expert_instruction": "Use a h5 file named \"100_h5_data.h5\" to create a polar plot visualizing electron transitions in an atom, with the plot representing only the top half of a circle (semi-circle). The file has datasets 'series', 'wavelength', 'L position', and 'p position'. Sort the data by the 'Series' and group the transitions accordingly. \n\n1. The plot should be a semi-circle representing the top half of a polar coordinate system. The radius of the semi-circle should be divided into 6 concentric regions, each representing an energy level, numbered from 1 to 6 starting from the center. Black lines should separate these regions to clearly distinguish the different energy levels.\n2. Label the left side of the semi-circle with energy level indicators '1n' through '6n', with '1n' closest to the center and '6n' at the outer edge. These labels should be aligned with the divisions between the regions.\n3. Label the right side of the semi-circle with the energy values '0 eV', '10.2 eV', '12.09 eV', '12.75 eV', '13.06 eV', '13.22 eV', with '0 eV' closest to the center and '13.22 eV' at the outer edge. These labels should be aligned with the corresponding energy level divisions.\n4. Electron transitions should be represented by arrows within the semi-circle. Each arrow should start at the radial position corresponding to the 'l position' (lower energy level) and point towards the radial position corresponding to the 'p position' (higher energy level). Arrows should be evenly distributed across the semi-circle, with equal angular spacing between them to ensure clarity and avoid overlap.\n5. Annotate each arrow with the wavelength of the transition, placing the label at the head of the arrow, just outside the semi-circle.\n6. Group the transitions by series, such as 'Lyman Series', 'Balmer Series', 'Paschen Series', etc., and use different colors for each series. Highlight each series by filling the angular range it occupies with a lighter shade of the same color.\n7. Ensure the plot is clear, with no overlapping text or arrows, and all labels and annotations are easily readable.\n8. The plot should not display any radial gridlines, radial ticks, or angle labels, and should have a title \"Electron Transitions for an Atom\" at the top."
    }
]